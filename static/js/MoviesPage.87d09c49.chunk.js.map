{"version":3,"sources":["servises/moviesApi.js","components/MovieList/MovieList.module.css","components/ButtonLoadMore/ButtonLoadMore.module.css","components/MovieList/MovieList.js","components/ButtonLoadMore/ButtonLoadMore.js","components/Searchbar/Searchbar.module.css","components/Searchbar/Searchbar.js","views/MoviesPage.js"],"names":["BASE_URL","fetchWithErrorHandling","a","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendingToday","page","fetchSearchingMovies","query","fetchMovieById","id","fetchMovieCast","fetchMovieReviews","module","exports","MovieList","movies","location","useLocation","className","s","map","movie","MovieListItem","to","pathname","state","from","MovieListItemUrl","MovieListItemImageWrapper","poster_path","src","alt","title","MovieListItemImage","name","MovieListItemOverlay","MovieListItemOverlayDescription","Button","onClick","ButtonLoadMore","Searchbar","onSubmit","useState","inputValue","setInputValue","SearchForm","e","preventDefault","trim","toast","error","type","SearchFormButton","SearchFormButtonLabel","SearchFormInput","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","MoviesPage","setQuery","setMovies","currentPage","setCurrentPage","history","useHistory","useEffect","search","slice","length","then","total_results","prevMovies","results","push","prevQuery","prevPage"],"mappings":"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","file":"static/js/MoviesPage.87d09c49.chunk.js","sourcesContent":["const BASE_URL = \"https://api.themoviedb.org/3\";\n// const APIKEY = \"api_key=d9642dccb373084b38b1ae3b08bc851f\";\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n    const response = await fetch(url, config);\n    return response.ok\n        ? await response.json()\n        : Promise.reject(new Error('Not Found'));\n}\n\nexport function fetchTrendingToday(page) {\n    return fetchWithErrorHandling(`${BASE_URL}/trending/movie/day?api_key=d9642dccb373084b38b1ae3b08bc851f&page=${page}`);\n}\n\nexport function fetchSearchingMovies(query, page) {\n    return fetchWithErrorHandling(`${BASE_URL}/search/movie?api_key=d9642dccb373084b38b1ae3b08bc851f&language=en-US&query=${query}&page=${page}&include_adult=false`);\n}\n\nexport function fetchMovieById(id) {\n    return fetchWithErrorHandling(`${BASE_URL}/movie/${id}?api_key=d9642dccb373084b38b1ae3b08bc851f&language=en-US`);\n}\n\nexport function fetchMovieCast(id) {\n    return fetchWithErrorHandling(`${BASE_URL}/movie/${id}/credits?api_key=d9642dccb373084b38b1ae3b08bc851f&language=en-US`)\n}\n\nexport function fetchMovieReviews(id) {\n    return fetchWithErrorHandling(`${BASE_URL}/movie/${id}/reviews?api_key=d9642dccb373084b38b1ae3b08bc851f&language=en-US&page=1`)\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MovieList\":\"MovieList_MovieList__2uXh-\",\"MovieListItem\":\"MovieList_MovieListItem__3_b3r\",\"MovieListItemOverlay\":\"MovieList_MovieListItemOverlay__39pZv\",\"MovieListItemImage\":\"MovieList_MovieListItemImage__1BeSL\",\"MovieListItemImageWrapper\":\"MovieList_MovieListItemImageWrapper__2RRlQ\",\"MovieListItemOverlayDescription\":\"MovieList_MovieListItemOverlayDescription__3yybI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonLoadMore\":\"ButtonLoadMore_ButtonLoadMore__2ZTsa\"};","import { Link } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes, { object } from 'prop-types';\nimport s from './MovieList.module.css';\n\nconst MovieList = ({ movies }) => {\n    const location = useLocation();\n    // console.log(location);\n\n    return (\n        <ul className={s.MovieList}>\n            {movies.map(movie => (\n                <li className={s.MovieListItem} key={movie.id}>\n                    <Link to={{\n                        pathname: `/movies/${movie.id}`,\n                        state: {from: location}\n                    }} id={movie.id} className={s.MovieListItemUrl}>\n                        <div className={s.MovieListItemImageWrapper}>\n                            {movie.poster_path\n                                ? (<img src={`https://image.tmdb.org/t/p/w500${ movie.poster_path }`} alt={movie.title} className={s.MovieListItemImage} />)\n                                : (<img src=\"http://placehold.it/432x648/000000/FFFFFF/?text=There+is+no+poster\" alt={movie.name} />)}\n                            <div className={s.MovieListItemOverlay}>\n                                <p className={s.MovieListItemOverlayDescription}>{movie.title}</p>\n                            </div>\n                    </div>\n                    </Link>\n                </li>\n            ))}\n        </ul>\n    );\n}\n\nMovieList.propTypes = {\n    movies: PropTypes.arrayOf(object).isRequired,\n}\n\nexport default MovieList;\n\n\n// ---------------------------------------------------------------------------------------------------------\n// import { useState, useEffect } from 'react';\n// import PropTypes from 'prop-types';\n// import Loader from 'react-loader-spinner';\n// import Button from 'components/Button';\n// import ImageGalleryItem from '../ImageGalleryItem';\n// import picturesApi from '../../servises/picturesApi';\n\n// const ImageGallery = ({ query, onClick }) => {\n//     const [images, setImages] = useState([]);\n    // const [error, setError] = useState(null);\n    // const [pages, setPages] = useState(0);\n    // const [currentPage, setCurrentPage] = useState(1);\n    // const [status, setStatus] = useState('idle');\n//     const [searshQuery, setSearshQuery] = useState('');\n\n    // const autoScroll = () => {\n    //     window.scrollTo({\n    //         top: document.documentElement.scrollHeight,\n    //         behavior: 'smooth',\n    //     });\n    // };\n\n//     const resetPage = () => {\n//         setCurrentPage(1);\n//         setImages([]);\n//     };\n\n//     useEffect(() => {\n//         if (query) {\n//             resetPage();\n//             setStatus('pending');\n//             picturesApi(query, 1).then(images => {\n//                 if (images.totalHits === 0) {\n//                     throw new Error(`Nothing with name ${query} was not found`);\n//                 };\n//                 setSearshQuery(query);\n//                 setImages([...images.hits]);\n//                 setStatus('resolved');\n//                 setPages(images.totalHits / 12);\n//                 autoScroll();\n//             }).catch(error => {\n//                 setError(error);\n//                 setStatus('rejected');\n//             } );\n//         }\n//     }, [query]);\n\n//     useEffect(() => {\n        \n//         if ( currentPage > 1 && query === searshQuery) {\n//             setStatus('another-pending');\n//             picturesApi(query, currentPage).then(images => {\n//                 setImages(prevImages => ([...prevImages, ...images.hits]));\n//                 setStatus('resolved');\n//                 autoScroll();\n//             }).catch(error => {\n//                 setError(error);\n//                 setStatus('rejected');\n//             });\n//         }\n//     }, [currentPage, query, searshQuery]);\n\n//     if (status === 'idle') {\n//             return (\n//                 <h1>Please, enter something</h1>\n//             );\n//         }\n\n//         if (status === 'pending') {\n//             return (\n//                 <Loader\n//                     type=\"ThreeDots\"\n//                     color=\"#3f51b5\"\n//                     height={280}\n//                     width={280}\n//                 />\n//             );\n//         }\n\n//         if (status === 'another-pending') {\n//             return (\n//                 <>\n//                     <ul className=\"ImageGallery\">\n//                         <ImageGalleryItem images={images} onClick={onClick} />\n//                     </ul>\n//                     <Loader\n//                         type=\"ThreeDots\"\n//                         color=\"#3f51b5\"\n//                         height={280}\n//                         width={280}\n//                     />\n//                 </>\n//             );\n//         }\n\n//         if (status === 'rejected') {\n//             return (\n//                 <h1>{error.message}</h1>\n//             )\n//         }\n\n//         if (status === 'resolved') {\n//             return (\n//                 <>\n//                     <ul className=\"ImageGallery\">\n//                         <ImageGalleryItem images={images} onClick={onClick} />\n//                     </ul>\n//                     {pages >= currentPage ?\n//                         <Button onClick={() => setCurrentPage(prevPage => prevPage + 1)} />\n//                         : <></>}\n//                 </>\n//             );\n//     };\n// }\n\n// ImageGallery.propTypes = {\n//     query: PropTypes.string.isRequired,\n//     onClick: PropTypes.func.isRequired,\n// };\n\n// export default ImageGallery;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ButtonLoadMore.module.css';\n\nconst Button = ({ onClick }) => (\n    <button className={s.ButtonLoadMore} onClick={onClick}>Load more</button>\n);\n\nButton.propTypes = {\n    onClick: PropTypes.func.isRequired,\n};\n\nexport default Button;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"Searchbar_Searchbar__DjWH3\",\"SearchForm\":\"Searchbar_SearchForm__1ac2l\",\"SearchFormButton\":\"Searchbar_SearchFormButton__21S85\",\"SearchFormButtonLabel\":\"Searchbar_SearchFormButtonLabel__8f9cn\",\"SearchFormInput\":\"Searchbar_SearchFormInput__VhsfU\"};","import { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport s from './Searchbar.module.css';\nimport PropTypes from 'prop-types';\n\nconst Searchbar = ({onSubmit}) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = e => {\n        setInputValue(e.currentTarget.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        if (inputValue.trim() === '') {\n          return toast.error('Please do not use empty string, you have to write something');\n        }\n\n        onSubmit(inputValue);\n        setInputValue('');\n    };\n\n    return (\n        <div className={s.Searchbar}>\n            <form className={s.SearchForm} onSubmit={handleSubmit}>\n                <button type=\"submit\" className={s.SearchFormButton}>\n                    <span className={s.SearchFormButtonLabel}>Search</span>\n                </button>\n\n                <input\n                    className={s.SearchFormInput}\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    autoFocus\n                    placeholder=\"Search movies\"\n                    value={inputValue}\n                    onChange={handleInputChange}\n                />\n            </form>\n        </div>\n    );\n}\n\nSearchbar.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n}\n\nexport default Searchbar;","import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport Searchbar from '../components/Searchbar';\nimport MovieList from 'components/MovieList';\nimport ButtonLoadMore from 'components/ButtonLoadMore';\nimport { fetchSearchingMovies } from '../servises/moviesApi';\n\nfunction MoviesPage() {\n    const [query, setQuery] = useState('');\n    const [movies, setMovies] = useState([]);\n    // const [error, setError] = useState(null);\n    // const [pages, setPages] = useState(0);\n    const [currentPage, setCurrentPage] = useState(1);\n    // const [status, setStatus] = useState('idle');\n\n    const history = useHistory();\n    \n    useEffect(() => {\n        if (query === '') {\n            setQuery(history.location.search.slice(7, history.location.search.length));\n        } else {\n            fetchSearchingMovies(query, currentPage).then(movies => {\n                if (movies.total_results === 0) {\n                    throw new Error(`Nothing with name ${query} was not found`);\n                };\n                setMovies(prevMovies => [...prevMovies, ...movies.results]);\n                history.push(`?query=${query}`);\n            });\n        }\n    }, [currentPage, history, query]);\n\n    const getQuery = query => {\n        setQuery(prevQuery => {\n            if (prevQuery !== query) {\n                setMovies([]);\n                setCurrentPage(1);\n                return (query);\n            }\n        });\n    }\n\n    // const autoScroll = () => {\n    //     window.scrollTo({\n    //         top: document.documentElement.scrollHeight,\n    //         behavior: 'smooth',\n    //     });\n    // };\n    \n    return (\n        <>\n            <Searchbar onSubmit={getQuery} />\n            {movies.length === 0\n                ? <h1>Start to search</h1>\n                : <>\n                    <MovieList movies={movies} />\n                    <ButtonLoadMore onClick={() => setCurrentPage(prevPage => prevPage + 1)}/>\n                </>\n            }\n            <ToastContainer />\n        </>\n    )\n}\n\nexport default MoviesPage;"],"sourceRoot":""}